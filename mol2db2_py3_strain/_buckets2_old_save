''' 
    2/11/2021, Benjamin Tingle
    Reworked _countPositions massively. Uses a new bucketing algorithm that doesn't require looping through all possible buckets
    Uses hashed buckets instead of an enormous array of buckets
    Also reworked it so that sets, confs, atom output coordinates are resolved in the _countPositions function rather than outside
    '''

    nmol2s = len(xyzData)
    natoms = len(xyzData[0])
    tolerance2 = tolerance**2
    # see explanation for bucketsize below
    bucketsize = tolerance / math.sqrt(3)
    extrawidth = tolerance - bucketsize

    print(bucketsize, extrawidth)

    moore_neighborhood = list(itertools.product(range(-1, 2), range(-1, 2), range(-1, 2)))
    moore_neighborhood.remove((0, 0, 0))

    moore_faces = [None for i in range(6)]
    moore_faces[0] = [(-2, i, j) for i,j in itertools.product(range(-1, 2), range(-1, 2))]
    moore_faces[1] = [( 2, i, j) for i,j in itertools.product(range(-1, 2), range(-1, 2))]
    moore_faces[2] = [(i, -2, j) for i,j in itertools.product(range(-1, 2), range(-1, 2))]
    moore_faces[3] = [(i,  2, j) for i,j in itertools.product(range(-1, 2), range(-1, 2))]
    moore_faces[4] = [(i, j, -2) for i,j in itertools.product(range(-1, 2), range(-1, 2))]
    moore_faces[5] = [(i, j,  2) for i,j in itertools.product(range(-1, 2), range(-1, 2))]

    def get_moore_faces(xyz, bxyz):
      x, y, z = xyz
      bx, by, bz = bxyz
      xd, yd, zd = (x-(bx*bucketsize)), (y-(by*bucketsize)), (z-(bz*bucketsize)) 

      faces = []

      if xd < extrawidth:
        faces.append(0)
      if xd > (bucketsize - extrawidth):
        faces.append(1)
      if yd < extrawidth:
        faces.append(2)
      if yd > (bucketsize - extrawidth):
        faces.append(3)
      if zd < extrawidth:
        faces.append(4)
      if zd > (bucketsize - extrawidth):
        faces.append(5)

      return faces

    confClusters = {}
    self.posCount = []
    self.setToConfs = {i : [] for i in range(nmol2s)}
    self.numConfs = 0
    confSets = [[] for i in range(nmol2s)]
    nxyz = 0
    confNum = 0

    facescheckedtotal = 0
    facescheckediters = 0

    for atom in range(natoms):

      buckets = {}
      mol2_buckets = [0 for i in range(nmol2s)]
      npos = 0

      for mol2 in range(nmol2s):
        
        xyzactual = xyzData[mol2][atom]
        bx, by, bz = math.floor(xyzactual[0]/bucketsize), math.floor(xyzactual[1]/bucketsize), math.floor(xyzactual[2]/bucketsize)
        xyzhash = (bx, by, bz)
        visited = [False]
        if not buckets.get(xyzhash):
          buckets[xyzhash] = (visited, [mol2]) # using a list so I can treat the visited flag as a pointer, since tuples are immutable
        else:
          buckets[xyzhash][1].append(mol2)
        mol2_buckets.append((xyzhash, visited))

      for xyzhash, (visited_this, mols) in buckets.items():
        if not mols: # if all mols from this cluster have already been absorbed into another cluster we continue
          continue

        xyz = xyzData[mols[0]][atom]
        nxyz += 1
        currCluster = [m for m in mols] 
        # any mols in this bucket are automatically clustered together, since by definition they must be within the tolerance distance
        # (tolerance) / sqrt(3)
        # ( this is the maximal size of a cube inscribed in a sphere where diameter == tolerance ) 
        # Since the diagonal length of a cube is sqrt(3) * r, even if two points are spaced out maximally within the cube at opposite ends of a diagonal, they will be within the tolerance distance
        # problem is that this requires checking an extended moore neighborhood of neighboring buckets. From 26 to 80 neighbors.
        # however, by analyzing the exact position of the point in each bucket, we can reduce the number of neighbors to check from an average of 80 to an average of ~65

        def check(loc):
          neighbor_mol2 = buckets.get(loc)

          if neighbor_mol2:
            visited, neighboring_atoms = neighbor_mol2
            if visited[0]:
              return

            lneighbor = len(neighboring_atoms)
            j = 0
            while j < lneighbor:
              ni = neighboring_atoms[j]
              xyzn = xyzData[ni][atom]

              dist = distL2Squared3(xyz, xyzn)
              if dist <= tolerance2:
                currCluster.append(ni)
                neighboring_atoms.pop(j)
                j -= 1
                lneighbor -= 1

              j += 1

        # this is where we analyze the point's xyz to determine which faces to process
        faces = get_moore_faces(xyz, xyzhash)

        for n in range(26):
          neighbor = moore_neighborhood[n]
          neighbor_loc = (xyzhash[0]+neighbor[0],xyzhash[1]+neighbor[1],xyzhash[2]+neighbor[2])
          check(neighbor_loc)

        for face_index in faces:
          for n in range(9):
            neighbor = moore_faces[face_index][n]
            neighbor_loc = (xyzhash[0]+neighbor[0],xyzhash[1]+neighbor[1],xyzhash[2]+neighbor[2])
            check(neighbor_loc)

        facescheckedtotal += (26 + 9 * len(faces))
        facescheckediters += 1

        currCluster = sorted(currCluster)
        visited_this[0] = True

        clusterTuple = tuple(currCluster)
        existingcluster = confClusters.get(clusterTuple)
        if not existingcluster:
          confClusters[clusterTuple] = (confNum, [atom], [xyz])
          for setno in currCluster:
            self.setToConfs[setno].append(confNum)
          confNum += 1
          npos += 1
        else:
          confNum_t, atomlist, xyzlist = confClusters[clusterTuple]
          atomlist.append(atom)
          xyzlist.append(xyz)
          npos += 1

      self.posCount.append(npos)

    self.confAtoms = [None for i in range(confNum)]
    self.confInput = [None for i in range(confNum)]
    self.outAtomOrigAtom = [0 for i in range(nxyz)]
    self.outAtomConfNum  = [0 for i in range(nxyz)]
    self.outAtomXYZ      = [0 for i in range(nxyz)]
    self.confNumAtomList = [[0, 0] for i in range(confNum)]

    globalAtomCnt = 0
    for tupleInput, confInfo in confClusters.items():
      confNum_t, atoms, xyzlist = confInfo
      
      self.confAtoms[confNum_t] = atoms
      self.confInput[confNum_t] = tupleInput
      self.confNumAtomList[confNum_t][0] = globalAtomCnt
      for i in range(len(atoms)):
        self.outAtomOrigAtom[globalAtomCnt] = atoms[i]
        self.outAtomConfNum[globalAtomCnt] = confNum_t
        self.outAtomXYZ[globalAtomCnt] = xyzlist[i]
        globalAtomCnt += 1
      self.confNumAtomList[confNum_t][1] = globalAtomCnt - 1

    self.outAtoms = globalAtomCnt

    self.numConfs = confNum

    print("POS_COUNT", self.posCount)
    print("AVG FACES CHECKED: {}".format(facescheckedtotal / facescheckediters))